<p><a href="https://www.reddit.com/r/learnprogramming/comments/9j3oi5/after_9_months_of_teaching_myself_how_to_program/">Discussion Link</a></p><p class="_1qeIAgB0cPwnLhDF9XSiJM" style="margin: 0px; padding: 0.8em 0px 0.25em; border: 0px; font-variant-numeric: inherit; font-variant-east-asian: inherit; font-stretch: inherit; font-size: 14px; line-height: inherit; font-family: &quot;Noto Sans&quot;, Arial, sans-serif; vertical-align: baseline; color: rgb(215, 218, 220); background-color: rgb(26, 26, 27);">Long story short, in December 2017 I was at crossroads in my life. Either finishing my endless journey to finish my master in chemistry or reinvent myself. Since by then I did some coding (literally few hundreds line of Python) and I enjoyed the experience I decided to throw all my savings into surviving for enough time till I could get a job as a developer. Meanwhile I would've studied and programmed till I was comfortable applying for jobs. Reflecting back into this long and hard journey I want to share my opinions on what this journey looks like, how does it start and how does it end. My points are in no particular order, albeit I guess I'll write some of those I find most important first.</p><ol class="_1eJr7K139jnMstd4HajqYP" style="margin-top: 4px; margin-bottom: 4px; margin-left: 8px; padding: 0px; border: 0px; font-variant-numeric: inherit; font-variant-east-asian: inherit; font-stretch: inherit; font-size: 14px; line-height: inherit; font-family: &quot;Noto Sans&quot;, Arial, sans-serif; vertical-align: baseline; list-style-position: outside; list-style-image: initial; color: rgb(215, 218, 220); background-color: rgb(26, 26, 27);"><li class="_3gqTEjt4x9UIIpWiro7YXz" style="margin: 0.4em 1em; padding: 0px; border: 0px; font: inherit; vertical-align: baseline;"><p class="_1qeIAgB0cPwnLhDF9XSiJM" style="margin: 0px; padding: 0px; border: 0px; font: inherit; vertical-align: baseline;"><span class="_12FoOEddL7j_RgMQN0SNeU" style="margin: 0px; padding: 0px; border: 0px; font-style: inherit; font-variant: inherit; font-weight: 700; font-stretch: inherit; font-size: inherit; line-height: inherit; font-family: inherit; vertical-align: baseline;">Set a very precise goal</span>. By this I mean a real life goal. This is by far the most important aspect of your journey. You need to have a clear vision on what's the finish line? Are you learning to code because you want to solve some real problem of yours? Maybe you want to automate some tasks you have at your home/job. Maybe you want to crack a videogame, maybe you're moved by curiosity, maybe you like learning new things, maybe you're an entrepeneur with no funds but a very solid idea you want to develop into a real world application. For the rest of this post tho I'll mostly speak from a perspective of who'se learning to code to find a job.</p></li><li class="_3gqTEjt4x9UIIpWiro7YXz" style="margin: 0.4em 1em; padding: 0px; border: 0px; font: inherit; vertical-align: baseline;"><p class="_1qeIAgB0cPwnLhDF9XSiJM" style="margin: 0px; padding: 0px; border: 0px; font: inherit; vertical-align: baseline;"><span class="_12FoOEddL7j_RgMQN0SNeU" style="margin: 0px; padding: 0px; border: 0px; font-style: inherit; font-variant: inherit; font-weight: 700; font-stretch: inherit; font-size: inherit; line-height: inherit; font-family: inherit; vertical-align: baseline;">If your goal is to find a job look at the job market, not on what's hot on Twitter and Medium</span>. Remember point one? You have to set a very&nbsp;<em class="_7s4syPYtk5hfUIjySXcRE" style="margin: 0px; padding: 0px; border: 0px; font-variant: inherit; font-weight: inherit; font-stretch: inherit; font-size: inherit; line-height: inherit; font-family: inherit; vertical-align: baseline;">precise</em>&nbsp;goal. A goal such as "I'd like to be a developer and work on videogames" is imho already too vague. Let's assume for a moment that finding a job in the videogame industry is your priority. I can't but think that these two things are sort of exclusive. You're already being focused on a small (but relevant) niche of programming jobs. Yet, what's your priority? Finding a&nbsp;<span class="_12FoOEddL7j_RgMQN0SNeU" style="margin: 0px; padding: 0px; border: 0px; font-style: inherit; font-variant: inherit; font-weight: 700; font-stretch: inherit; font-size: inherit; line-height: inherit; font-family: inherit; vertical-align: baseline;">real</span>&nbsp;coding job, or working in the videogame industry? What if you won't find a job in the videogame industry cause there are no companies in your area or you will simply not meet their requirements (likely in the gaming industry). If you'll learn to code in whatever language, I can guarantee you that you will be able to translate that knowledge someday on videogames if that's your goal. You'll have to learn tons of new stuff. But you have the problem solving skills and knowledge of programming to make this step.</p></li></ol><p class="_1qeIAgB0cPwnLhDF9XSiJM" style="margin: 0px; padding: 0.8em 0px 0.25em; border: 0px; font-variant-numeric: inherit; font-variant-east-asian: inherit; font-stretch: inherit; font-size: 14px; line-height: inherit; font-family: &quot;Noto Sans&quot;, Arial, sans-serif; vertical-align: baseline; color: rgb(215, 218, 220); background-color: rgb(26, 26, 27);">Seriously, look at the job market and remember point 1. Are you willing to move abroad? Cross state? Cross country? Cross continent? It'll be harder to find a job that's far from your house. It's harder for a company to ask you to take a flight for an interview. And since you're a self taught developer and not an MIT stellar graduate those expenses will likely be all on you. I did a mistake on pointi in Decembet 2017. I decided that my priority was finding a job and I wanted to be a front end developer. I can't but feel this was a mistake. In my area C#, php and Java works are in a 9:1 ratio to front end JS jobs. So check carefully the companies in your area, literally count the positions and their requirements.</p><p class="_1qeIAgB0cPwnLhDF9XSiJM" style="margin: 0px; padding: 0.8em 0px 0.25em; border: 0px; font-variant-numeric: inherit; font-variant-east-asian: inherit; font-stretch: inherit; font-size: 14px; line-height: inherit; font-family: &quot;Noto Sans&quot;, Arial, sans-serif; vertical-align: baseline; color: rgb(215, 218, 220); background-color: rgb(26, 26, 27);">3)&nbsp;<span class="_12FoOEddL7j_RgMQN0SNeU" style="margin: 0px; padding: 0px; border: 0px; font-style: inherit; font-variant: inherit; font-weight: 700; font-stretch: inherit; font-size: inherit; line-height: inherit; font-family: inherit; vertical-align: baseline;">Do never, ever, ever, make assumptions on what's harder and what's easier in programming</span>. I did this when I decided to learn front end. This was a huge mistake. It's not true that front end is easier than backend, neither is the opposite, and more importantly you can't even possibly know at this point what you'll like more and you're more adapt to. Don't make assumptions. Just don't. Do never, ever, think that JavaScript is easier than C, nor the opposite. Different tools for different problems with different complexities. I could tell you you could fit everything about C in a 200 pages book, literally everything about the language, and tell you that it would take twice the pages just to give a solid, yet incomplete, picture of objects in JavaScript. You are simply not qualified to know what's "harder" and what's "easier". Neither I am. For the love of god, don't make this mistake. Of course, some aspects of programming leverage more or less maths or creativity or organization or whatever. But can you really tell me that in 24 months from now optimizing rendering and network performance on x platforms will be "easier" than refining algorithms that predict weather based on some geospatial data? Are you sure that managing state in complex real time applications will be easier than writing shaders or teaching a computer how to translate or paint? You simply do not know. Do, not, make, any fuckin assumption of this kind.</p><p class="_1qeIAgB0cPwnLhDF9XSiJM" style="margin: 0px; padding: 0.8em 0px 0.25em; border: 0px; font-variant-numeric: inherit; font-variant-east-asian: inherit; font-stretch: inherit; font-size: 14px; line-height: inherit; font-family: &quot;Noto Sans&quot;, Arial, sans-serif; vertical-align: baseline; color: rgb(215, 218, 220); background-color: rgb(26, 26, 27);">4)&nbsp;<span class="_12FoOEddL7j_RgMQN0SNeU" style="margin: 0px; padding: 0px; border: 0px; font-style: inherit; font-variant: inherit; font-weight: 700; font-stretch: inherit; font-size: inherit; line-height: inherit; font-family: inherit; vertical-align: baseline;">Be consistent in your learning</span>. How much time do you have to study programming? Are you already a student? Or maybe you're unemployed (as I was) but have enough savings to dedicate yourself to studying. Be realistic about your goals but be&nbsp;<span class="_12FoOEddL7j_RgMQN0SNeU" style="margin: 0px; padding: 0px; border: 0px; font-style: inherit; font-variant: inherit; font-weight: 700; font-stretch: inherit; font-size: inherit; line-height: inherit; font-family: inherit; vertical-align: baseline;">consistent</span>. Writing code for 1 hour every day for a week will make you a better programmer, than coding once a week for 7 hours.</p><p class="_1qeIAgB0cPwnLhDF9XSiJM" style="margin: 0px; padding: 0.8em 0px 0.25em; border: 0px; font-variant-numeric: inherit; font-variant-east-asian: inherit; font-stretch: inherit; font-size: 14px; line-height: inherit; font-family: &quot;Noto Sans&quot;, Arial, sans-serif; vertical-align: baseline; color: rgb(215, 218, 220); background-color: rgb(26, 26, 27);">5)&nbsp;<span class="_12FoOEddL7j_RgMQN0SNeU" style="margin: 0px; padding: 0px; border: 0px; font-style: inherit; font-variant: inherit; font-weight: 700; font-stretch: inherit; font-size: inherit; line-height: inherit; font-family: inherit; vertical-align: baseline;">Do not feel compelled to know everything's that required on the positions you want to apply</span>. This is especially true for frameworks and libraries. There's a reason why top companies focus a lot on data structures and algorithms, they show you can think and solve a problem. More specifically, whatever programming language you choose (any of Java, JavaScript, C#, Python and PHP is likely to find you a job, the others might be more nichey) learn it's fundamentals as best as possible. I learned front end development. I felt this huge need to learn from html to the dom, plenty of libraries, transpiling, webpack, etc, etc. Yet reality is that at job interviews those topics were barely if ever touched. But what they wanted to know is that I&nbsp;<span class="_12FoOEddL7j_RgMQN0SNeU" style="margin: 0px; padding: 0px; border: 0px; font-style: inherit; font-variant: inherit; font-weight: 700; font-stretch: inherit; font-size: inherit; line-height: inherit; font-family: inherit; vertical-align: baseline;">really</span>&nbsp;understood JavaScript. I've applied for 3 front end react jobs, I've never been asked a single question about react's ecosystem. Not once, ever. Nobody cared. What they cared of? If I knew what was strict mode, the difference between a function expression and a function declaration, the utility of IIFEs, prototypical inheritance, closures, etc. Nobody gives a damn if you know React's methods (I mean, if you learn React you're supposed to have at least a basic knowledge of how it works), but the core knowledge needed to be a good React developer is knowing JavaScript. If you know JavaScript and the dom, learning React is a matter of a week. If you don't you'll never be a good React developer. Higher order functions, the&nbsp;<em class="_7s4syPYtk5hfUIjySXcRE" style="margin: 0px; padding: 0px; border: 0px; font-variant: inherit; font-weight: inherit; font-stretch: inherit; font-size: inherit; line-height: inherit; font-family: inherit; vertical-align: baseline;">this</em>&nbsp;binding, those are the real problems and knowledge React developers need everyday. The rest is a google search away. I can tell you that I haven't been asked once something that wasn't written in Eloquent JavaScript, not once. Of course, I did some research and work to understand some topics better. If they ask you what a promise is, you answer that it is an object. Sure, there might be the need to expand. But seriously, just because you used promises, doesn't mean you understand them. Mumbling about "they are&nbsp;<em class="_7s4syPYtk5hfUIjySXcRE" style="margin: 0px; padding: 0px; border: 0px; font-variant: inherit; font-weight: inherit; font-stretch: inherit; font-size: inherit; line-height: inherit; font-family: inherit; vertical-align: baseline;">something</em>&nbsp;you use to make asynchronous code" might say something more than saying "they are objects". But the second answer simply shows you have no understanding of JavaScript. Plain and simple. Maybe you get they are objects because they are declared with the&nbsp;<em class="_7s4syPYtk5hfUIjySXcRE" style="margin: 0px; padding: 0px; border: 0px; font-variant: inherit; font-weight: inherit; font-stretch: inherit; font-size: inherit; line-height: inherit; font-family: inherit; vertical-align: baseline;">new</em>&nbsp;keyword, but you really need to understand the basics of JavaScript. The same applies for any other language. The overwhelming majority of errors and bugs that will make you bang your head on the wall derive from lack of proper understanding of the basics of a language. Just because you read something, doesn't mean you absorbed it, even less mastered it. It's hard to trust a person who has 10 skills/tools on their cv, yet he didn't really master one.</p><p class="_1qeIAgB0cPwnLhDF9XSiJM" style="margin: 0px; padding: 0.8em 0px 0.25em; border: 0px; font-variant-numeric: inherit; font-variant-east-asian: inherit; font-stretch: inherit; font-size: 14px; line-height: inherit; font-family: &quot;Noto Sans&quot;, Arial, sans-serif; vertical-align: baseline; color: rgb(215, 218, 220); background-color: rgb(26, 26, 27);">6)&nbsp;<span class="_12FoOEddL7j_RgMQN0SNeU" style="margin: 0px; padding: 0px; border: 0px; font-style: inherit; font-variant: inherit; font-weight: 700; font-stretch: inherit; font-size: inherit; line-height: inherit; font-family: inherit; vertical-align: baseline;">Try to find a mentor</span>. Plenty of people more experienced than you are active on slacks, irc, discord, etc. You may find somebody willing to help you long term. Also there are the beautiful people on ##javascript on freenode which have been an invaluable learning experience for me and I thank all the members here (especially ljharb, slikts, stennowork, liste, innovati, zsoc, cjhonson, qswz, GreenJello, sillyslux). Mind you I'm not inviting any of you to contact these people, they help in general chats not one on one, I'm not aware of them doing any mentoring, I found some mentors here on reddit and on a slack channel for developers in my area. Two tips: don't abuse the patience and will of a mentor to help you. If you keep asking basic questions that can be googled or found in basic books (such as Kochan's C book or Eloquent for JavaScript) they will get tired of you and start answering less and less. The second tip: programmers, all of them, including you, they love to feel the smartest person around, I think it's the nature of people that solve problems through logic. Abuse this fact to find information you need. A simple example: if you go in a chatroom and write "lol I didn't know you could bind arrow functions" you'll get 20 answers telling you why you're write (and wrong). If you go in a chatroom and ask "how does this work in arrow functions?" you may not receive any answer.</p><p class="_1qeIAgB0cPwnLhDF9XSiJM" style="margin: 0px; padding: 0.8em 0px 0.25em; border: 0px; font-variant-numeric: inherit; font-variant-east-asian: inherit; font-stretch: inherit; font-size: 14px; line-height: inherit; font-family: &quot;Noto Sans&quot;, Arial, sans-serif; vertical-align: baseline; color: rgb(215, 218, 220); background-color: rgb(26, 26, 27);">7)&nbsp;<span class="_12FoOEddL7j_RgMQN0SNeU" style="margin: 0px; padding: 0px; border: 0px; font-style: inherit; font-variant: inherit; font-weight: 700; font-stretch: inherit; font-size: inherit; line-height: inherit; font-family: inherit; vertical-align: baseline;">Understand what programming is</span>: you take data as input, you do something with it, you generate an output. That's what every meaningful program or subroutine does. Nothing less nothing more. I wish somebody told me that when I started and stared at this overwhelming amount of endless information. In the end, I was always solving the very same problem over and over. Each time differently, with different tools, different approaches, but every program as small as you think about it does that. You may add two numbers: input numbers -&gt; process- -&gt; output sum. You may want to render a 3d model on the screen: camera + matrice of vertices -&gt; process -&gt; 2d image on the screen. You may want to set your profile picture on a website: data input + address -&gt; process -&gt; response from server. That's all there is to programming, and that's why algorithms and data structures are the backbone of most top companies interviews: because that's&nbsp;<span class="_12FoOEddL7j_RgMQN0SNeU" style="margin: 0px; padding: 0px; border: 0px; font-style: inherit; font-variant: inherit; font-weight: 700; font-stretch: inherit; font-size: inherit; line-height: inherit; font-family: inherit; vertical-align: baseline;">all</span>&nbsp;there is to computing. data -&gt; processing -&gt; data. That being said I know very little of data structures and algorithms. I'm unlikely to implement a merge algorithm or implement complex data structures and they were never really asked at any interview. Just knowing time complexity and different utility of different data structures was more than enough for my interviews. But that might differ in other companies and positions.</p><p class="_1qeIAgB0cPwnLhDF9XSiJM" style="margin: 0px; padding: 0.8em 0px 0.25em; border: 0px; font-variant-numeric: inherit; font-variant-east-asian: inherit; font-stretch: inherit; font-size: 14px; line-height: inherit; font-family: &quot;Noto Sans&quot;, Arial, sans-serif; vertical-align: baseline; color: rgb(215, 218, 220); background-color: rgb(26, 26, 27);">8)&nbsp;<span class="_12FoOEddL7j_RgMQN0SNeU" style="margin: 0px; padding: 0px; border: 0px; font-style: inherit; font-variant: inherit; font-weight: 700; font-stretch: inherit; font-size: inherit; line-height: inherit; font-family: inherit; vertical-align: baseline;">Understand what programmers do</span>. They solve problems through the use of code. That's why it is very required that you bang your head on a wall when you can't find a solution to your coding problem. When I started I was desperate when I was writing a small demo and every time I pressed a button the page refreshed. Even asking around I couldn't find the reason. In the end it was something pretty trivial: button elements without a type attribute are treated as submits. Submits by default refresh the page when triggered. Many people looked at my code and couldn't find the reason and yet they overlooked this very trivial issue. But in reality that's what's going to happen over and over: why "foo" is not a function? Why is my program reading the property of undefined? As a programmer you solve problems (often created by yourself). If you think that following some bullshit video cours on youtube/udemy will make you a programmer you're in for a bad time. Looking at people solving problems for you means you are not developing your problem solving skills. When you don't understand why something's not behaving resist the urge from googling right away, or asking somebody more experienced. Please understand that this is exactly how's your job gonna look like. Get good at solving problems. Some might be syntax problems (as the ones before), some will be performance related, etc. Regardless. Learn to solve problems, embrace the power of debuggers. Understand that code is merely an implementation of an idea. Get used to program with pencil and paper. Define well your problems, input, output and how to go from one to the other. Organize your code. Look at your mess of spaghetti code, at your messy and poorly named functions and variables, at the code you can't already follow after few hundred lines. Then improve it.</p><p class="_1qeIAgB0cPwnLhDF9XSiJM" style="margin: 0px; padding: 0.8em 0px 0.25em; border: 0px; font-variant-numeric: inherit; font-variant-east-asian: inherit; font-stretch: inherit; font-size: 14px; line-height: inherit; font-family: &quot;Noto Sans&quot;, Arial, sans-serif; vertical-align: baseline; color: rgb(215, 218, 220); background-color: rgb(26, 26, 27);">9)&nbsp;<span class="_12FoOEddL7j_RgMQN0SNeU" style="margin: 0px; padding: 0px; border: 0px; font-style: inherit; font-variant: inherit; font-weight: 700; font-stretch: inherit; font-size: inherit; line-height: inherit; font-family: inherit; vertical-align: baseline;">Have a basic knowledge of how computers (so every single device out there) works</span>. Seriously. Knowing von Neumann's architecture basics and the memory model is the very least you should know and you can learn this things in few hours. Even wikipedia, youtube or some blog are enough, but learn it. The memory model and the call stack will then no longer be something complex and your code will get better and you'll learn coding faster. No longer you'll wonder why you can't mutate a string or why why you pass non primitive types by reference rather than value. This will have a meaningful impact on your learning speed and understanding on how computers work (from our perspective, at least).</p><p class="_1qeIAgB0cPwnLhDF9XSiJM" style="margin: 0px; padding: 0.8em 0px 0.25em; border: 0px; font-variant-numeric: inherit; font-variant-east-asian: inherit; font-stretch: inherit; font-size: 14px; line-height: inherit; font-family: &quot;Noto Sans&quot;, Arial, sans-serif; vertical-align: baseline; color: rgb(215, 218, 220); background-color: rgb(26, 26, 27);">10)&nbsp;<span class="_12FoOEddL7j_RgMQN0SNeU" style="margin: 0px; padding: 0px; border: 0px; font-style: inherit; font-variant: inherit; font-weight: 700; font-stretch: inherit; font-size: inherit; line-height: inherit; font-family: inherit; vertical-align: baseline;">Don't learn from videos</span>. The more advanced and nichey stuff you'll have to do the less resources you will have to solve it. Get used to write programs only with resources that require you one google search and as little information as possible. You'll have to use libraries with poor or no documentation. You'll have to look at the code to understand why that library is mutating that particular object or it is behaving differently from expected. Go on github, look at popular libraries. They are overwhelmed of problems. And the dozens of brilliant engineers that wrote this technology never had this issue before you. I understand this is advanced stuff. But it's a good habit. I have yet to see a single code topic that cannot be learned better through reading the code or some well written book/article than some video. Also, beware, most people out there doing those courses and lectures are not necessarily good programmers, even if they are, they are not necessarily good teachers. Remember the guy who answered "what's a promise" mumbling about something to do asynchronous programming? That's the guy who learned to code from videos and never had a real rigor in studying. The more defined a concept is, the easier it is to understand it. I'm not saying "don't use videos". There's hundreds of videos that helped me both with concepts, problem solving or by watching how to use some technology. Just get in the habit of making them your last resource. I myself liked, e.g., Andrew Mead's React course it teached me&nbsp;<span class="_12FoOEddL7j_RgMQN0SNeU" style="margin: 0px; padding: 0px; border: 0px; font-style: inherit; font-variant: inherit; font-weight: 700; font-stretch: inherit; font-size: inherit; line-height: inherit; font-family: inherit; vertical-align: baseline;">a lot</span>. But in the end, not a single thing I was shown really stuck with me if in the end I didn't researched stuff on my own and tried it over and over, and going back to a specific point of a specific video to watch a specific example of a specifc version of a software is nothing short of a weak surrogate to proper critical learning.</p><p class="_1qeIAgB0cPwnLhDF9XSiJM" style="margin: 0px; padding: 0.8em 0px 0.25em; border: 0px; font-variant-numeric: inherit; font-variant-east-asian: inherit; font-stretch: inherit; font-size: 14px; line-height: inherit; font-family: &quot;Noto Sans&quot;, Arial, sans-serif; vertical-align: baseline; color: rgb(215, 218, 220); background-color: rgb(26, 26, 27);">11)&nbsp;<span class="_12FoOEddL7j_RgMQN0SNeU" style="margin: 0px; padding: 0px; border: 0px; font-style: inherit; font-variant: inherit; font-weight: 700; font-stretch: inherit; font-size: inherit; line-height: inherit; font-family: inherit; vertical-align: baseline;">Debugging and version control</span>. These two are probably more important than anything safe for language and computing basics and the most required in a working environment. Tooling would be a safe second spot. If you know Java properly (just to change from the usual JS examples :P) then learning Spring is much easier than learning docker and git. Yet probably you'll invest 95% of your time writing Spring code, e.g. If you know Python properly, you can grasp Django in a weekend..What about proper error handling in Python tho..? Same goes for your IDEs, etc. Learn one and master it. Knowing 5 IDEs is useless if you're constantly using your mouse to open a terminal, you don't know how to navigate your documents properly, rename variables in a file together, etc. Mind you, I'm not saying that these are fundamental for a junior position (well, maybe debugging with anything by prints or console.logs kinda is), you can get away not knowing them but this stuff sticks for years.</p><p class="_1qeIAgB0cPwnLhDF9XSiJM" style="margin: 0px; padding: 0.8em 0px 0.25em; border: 0px; font-variant-numeric: inherit; font-variant-east-asian: inherit; font-stretch: inherit; font-size: 14px; line-height: inherit; font-family: &quot;Noto Sans&quot;, Arial, sans-serif; vertical-align: baseline; color: rgb(215, 218, 220); background-color: rgb(26, 26, 27);">12)&nbsp;<span class="_12FoOEddL7j_RgMQN0SNeU" style="margin: 0px; padding: 0px; border: 0px; font-style: inherit; font-variant: inherit; font-weight: 700; font-stretch: inherit; font-size: inherit; line-height: inherit; font-family: inherit; vertical-align: baseline;">Do never attempt to learn too many things at once</span>. Move with small but solid steps. I made this error and I think it costed me a lot. I'm not saying reading Hennessy and Patterson wasn't useless..Or that reading about design patterns was useless..Or that playing with Rust, C# was...Or that watching all this youtube videos, interesting talks, reading about behaviour driven design and gerkin was useless..Or that all of those blog posts I reed was useless..But remember point 1? You must have priorities. You must move by small solid steps. It's good if you're curious as I am. But it's much better to receive a salary, learn in a comfortable environment under the guidance of senior developers and then go home and play with Rust or watch talks about immutability if you want to than do it when you have a different goal.</p><p class="_1qeIAgB0cPwnLhDF9XSiJM" style="margin: 0px; padding: 0.8em 0px 0.25em; border: 0px; font-variant-numeric: inherit; font-variant-east-asian: inherit; font-stretch: inherit; font-size: 14px; line-height: inherit; font-family: &quot;Noto Sans&quot;, Arial, sans-serif; vertical-align: baseline; color: rgb(215, 218, 220); background-color: rgb(26, 26, 27);"><span class="_12FoOEddL7j_RgMQN0SNeU" style="margin: 0px; padding: 0px; border: 0px; font-style: inherit; font-variant: inherit; font-weight: 700; font-stretch: inherit; font-size: inherit; line-height: inherit; font-family: inherit; vertical-align: baseline;">For the hiring process</span>:</p><p class="_1qeIAgB0cPwnLhDF9XSiJM" style="margin: 0px; padding: 0.8em 0px 0.25em; border: 0px; font-variant-numeric: inherit; font-variant-east-asian: inherit; font-stretch: inherit; font-size: 14px; line-height: inherit; font-family: &quot;Noto Sans&quot;, Arial, sans-serif; vertical-align: baseline; color: rgb(215, 218, 220); background-color: rgb(26, 26, 27);">12)&nbsp;<span class="_12FoOEddL7j_RgMQN0SNeU" style="margin: 0px; padding: 0px; border: 0px; font-style: inherit; font-variant: inherit; font-weight: 700; font-stretch: inherit; font-size: inherit; line-height: inherit; font-family: inherit; vertical-align: baseline;">network &gt; experience &gt; knowledge</span>. Most companies around are always hiring. You don't see their ad, because they have none. Maybe they don't even have a "work with us" section on their website. But most companies are always hiring talent. As you're likely to enter at the lowest position, with the lowest possible salary, they might still be interested in you for this very same reasons. So networking, knowing people is paramount for your job research. I invite you strongly, if you can, to participate to your local communities both online and especially offline. I didn't get a single answer to any of my CVs I sent. But all the interviews I had derived from me knowing somebody who worked somewhere. "oh, you're a developer", "yeah I just started, still learning, I kind of suck xD", "well when you feel like it send me your cv I'll give it to my hr/team leader". If you're a self taught developer your hiring process (this depends also on the area and position you're looking for) is going to be very hard. You don't have experience. You may have skills and knowledge, but nothing to put on your cv. Just because you say you know Python nobody's gonna interview if you have nothing to show nor way to prove it. Interviewing you means the company is actually losing money. Two or more developers are not working, but getting paid. HR/management could be doing something eòse. Time is money, the bigger the company, the more money they are losing to put you in a room. I know and I felt the pain of knowing stuff and having no way to prove it, but that's how it is. So after network comes experience. Here you have basically two options: contribute to open source (either write some library/module people use, even a good pull request is a nice on a CV) or develop something people use. Even if it's for free. I didn't go with the first, but I went for the second. I developed a small application for a football club in my city that needed to inform players of the various youth teams who was going to play on sunday game. Nothing too impressive, nothing too pretty, but it's something hundreds of people use every single week. The fact that you solved a real world problem using code, you meet the requirements somebody gave you, is massive. My uncle needed a website for bookings for his bed and breakfast. I wrote it for him. Complex database with real time booking? No. But I solved a real world problem for somebody, and people use it everyday. Does it matter that it has plenty of anti patterns? Maybe your beautiful instagram clone with rest endpoint etc is much cleaner code but..Does anybody uses it? Is there anything original and not cloned from some udemy course? Maybe you have a smart tv and you're tired of transferring files with your usb to watch your shows you have on your hard disk? You've got a router..You've got a tv that you can install program to? Maybe spend a month to write some very basic, even ugly, but working application that allows for data transfer between your computer and tv? Somebody's gonna use it. Solve real world problems, for real world people. Those are sound things to put on a cv. They give you endless opportunities to talk about how you solve problems. What did you do well, what sucked? I didn't use no state manager on my first react application, as the application grew I encountered plenty of problems due to that and maintaining code got harder. I met a real world problem, I solved it, I know if and why my solution was good or bad. Look around you, what problem you can solve and help somebody? Start from your own problems and move asap on somebody's else. Even if it means it's for free.</p><p class="_1qeIAgB0cPwnLhDF9XSiJM" style="margin: 0px; padding: 0.8em 0px 0.25em; border: 0px; font-variant-numeric: inherit; font-variant-east-asian: inherit; font-stretch: inherit; font-size: 14px; line-height: inherit; font-family: &quot;Noto Sans&quot;, Arial, sans-serif; vertical-align: baseline; color: rgb(215, 218, 220); background-color: rgb(26, 26, 27);">What's there to talk about your perfectly implemented Django+PostgreSQL twitter clone? Nothing. Zero. Last comes knowledge. And this is a big problem. Because if nobody puts your resume on somebody's desk saying you can be a good resource after some time that's the only thing you're going to be judged for. If you'll be even given this opportunity. Having released two android apps even if they are nothing spectacular (maybe you just created an offline version of some website/doc, e.g.) means you can solve problems. You have something on your cv. Maybe you weren't able to answer questions given to you, but fact is a fact: given time you can find the resources (on the net, and inside you) to deliver a product. So knowledge becomes your only resource. And it's a bad resource. Because when you're put in front of somebody with 10 years of experience, saing "value" rather than "variable" tells a lot about you. So nobody recommends you, nobody uses anything you wrote, your github is a collection of initialized and abandoned projects and copy cuts from tutorials, you're asked about basic stuff (which is the hardest questions btw) and you are not providing clear confident answers who's gonna pay you?</p><p class="_1qeIAgB0cPwnLhDF9XSiJM" style="margin: 0px; padding: 0.8em 0px 0.25em; border: 0px; font-variant-numeric: inherit; font-variant-east-asian: inherit; font-stretch: inherit; font-size: 14px; line-height: inherit; font-family: &quot;Noto Sans&quot;, Arial, sans-serif; vertical-align: baseline; color: rgb(215, 218, 220); background-color: rgb(26, 26, 27);">13)** Bonus**: if you have more than 6-7 months to prepare before you'll start actively looking for jobs one thing I may recommend you is to start with the C programming language. C is a small language, it doesn't have many things, most C books are shorter than any introduction to higher level languages. Learning C teaches you a lot about computing. An awful lot. To put it differently. I'm confident that if I spent 2 months learning C (at least 4 hours a day) and solving easy and intermediate leetcode or similar problems and then spent 4 months learning another higher language I'd be a much better programmer than if I just started in this other higher language. There's much too much focus on too many technologies, there's too much noise in higher level languages. You'll be tempted way too soon to move from "how do I go from input to output" which is the very essence of programming to developing full programs. I know that text input and output isn't sexy, but remember point 1? We want the best and possibly the shortest path to get ourselves onto being decent and proficient asap. C might be slower at first. But then you move unto another language and not only you'll find that in the end you're solving the same problems you were solving with C (because it's always the same fuckin problem as I told you) but you need to do so with an endless amount of different APIs and conflicting, similar methods.</p><p class="_1qeIAgB0cPwnLhDF9XSiJM" style="margin: 0px; padding: 0.8em 0px 0.25em; border: 0px; font-variant-numeric: inherit; font-variant-east-asian: inherit; font-stretch: inherit; font-size: 14px; line-height: inherit; font-family: &quot;Noto Sans&quot;, Arial, sans-serif; vertical-align: baseline; color: rgb(215, 218, 220); background-color: rgb(26, 26, 27);">14)&nbsp;<span class="_12FoOEddL7j_RgMQN0SNeU" style="margin: 0px; padding: 0px; border: 0px; font-style: inherit; font-variant: inherit; font-weight: 700; font-stretch: inherit; font-size: inherit; line-height: inherit; font-family: inherit; vertical-align: baseline;">Bonus 2</span>: learn to manage your time. You're sitting behind a computer all day learning how to code. It's tempting to go on lichess, launch league or procrastinate but it's lots of time wasted. You can&nbsp;<span class="_12FoOEddL7j_RgMQN0SNeU" style="margin: 0px; padding: 0px; border: 0px; font-style: inherit; font-variant: inherit; font-weight: 700; font-stretch: inherit; font-size: inherit; line-height: inherit; font-family: inherit; vertical-align: baseline;">easily</span>&nbsp;cut off large amount of weeks/months needed to reach a decent level of preparation by managing your time better.</p><p class="_1qeIAgB0cPwnLhDF9XSiJM" style="margin: 0px; padding: 0.8em 0px 0.25em; border: 0px; font-variant-numeric: inherit; font-variant-east-asian: inherit; font-stretch: inherit; font-size: 14px; line-height: inherit; font-family: &quot;Noto Sans&quot;, Arial, sans-serif; vertical-align: baseline; color: rgb(215, 218, 220); background-color: rgb(26, 26, 27);">14)&nbsp;<span class="_12FoOEddL7j_RgMQN0SNeU" style="margin: 0px; padding: 0px; border: 0px; font-style: inherit; font-variant: inherit; font-weight: 700; font-stretch: inherit; font-size: inherit; line-height: inherit; font-family: inherit; vertical-align: baseline;">Bonus 3</span>: resting, socializing, relations, having fun, taking care of yourself are super important. Sitting alone reading blogs and staring at Visual Studio all day can be very hard for your mental health and can alienate you. Work hard, be disciplined, but be disciplined in other aspects of your life too, because if a certain balance is broken it leaks in every other of your aspects.</p><p class="_1qeIAgB0cPwnLhDF9XSiJM" style="margin: 0px; padding: 0.8em 0px 0px; border: 0px; font-variant-numeric: inherit; font-variant-east-asian: inherit; font-stretch: inherit; font-size: 14px; line-height: inherit; font-family: &quot;Noto Sans&quot;, Arial, sans-serif; vertical-align: baseline; color: rgb(215, 218, 220); background-color: rgb(26, 26, 27);">That's all, I'm sorry if that was long, I hope somebody might find it helpful and remember anything here is my mere opinion and you'll find plenty of people disagreeing</p>